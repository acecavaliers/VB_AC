'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Library_DB_AC")>  _
Partial Public Class DataClasseLibraryDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPublisher(instance As Publisher)
    End Sub
  Partial Private Sub UpdatePublisher(instance As Publisher)
    End Sub
  Partial Private Sub DeletePublisher(instance As Publisher)
    End Sub
  Partial Private Sub InsertStudent(instance As Student)
    End Sub
  Partial Private Sub UpdateStudent(instance As Student)
    End Sub
  Partial Private Sub DeleteStudent(instance As Student)
    End Sub
  Partial Private Sub InsertBook(instance As Book)
    End Sub
  Partial Private Sub UpdateBook(instance As Book)
    End Sub
  Partial Private Sub DeleteBook(instance As Book)
    End Sub
  Partial Private Sub InsertBookAccession(instance As BookAccession)
    End Sub
  Partial Private Sub UpdateBookAccession(instance As BookAccession)
    End Sub
  Partial Private Sub DeleteBookAccession(instance As BookAccession)
    End Sub
  Partial Private Sub InsertTransHeader(instance As TransHeader)
    End Sub
  Partial Private Sub UpdateTransHeader(instance As TransHeader)
    End Sub
  Partial Private Sub DeleteTransHeader(instance As TransHeader)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.LinQ_AC.My.MySettings.Default.Library_DB_ACConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Publishers() As System.Data.Linq.Table(Of Publisher)
		Get
			Return Me.GetTable(Of Publisher)
		End Get
	End Property
	
	Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
		Get
			Return Me.GetTable(Of Student)
		End Get
	End Property
	
	Public ReadOnly Property Books() As System.Data.Linq.Table(Of Book)
		Get
			Return Me.GetTable(Of Book)
		End Get
	End Property
	
	Public ReadOnly Property BookAccessions() As System.Data.Linq.Table(Of BookAccession)
		Get
			Return Me.GetTable(Of BookAccession)
		End Get
	End Property
	
	Public ReadOnly Property View_Details() As System.Data.Linq.Table(Of View_Detail)
		Get
			Return Me.GetTable(Of View_Detail)
		End Get
	End Property
	
	Public ReadOnly Property TransHeaders() As System.Data.Linq.Table(Of TransHeader)
		Get
			Return Me.GetTable(Of TransHeader)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SP_InsertTransactionDetails_New")>  _
	Public Function SP_InsertTransactionDetails_New(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal iTransID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal iBookAccessionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal iBookID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal dDateToReturn As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal dActualDateReturn As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iTransID, iBookAccessionID, iBookID, dDateToReturn, dActualDateReturn)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SP_InsertTrans")>  _
	Public Function SP_InsertTrans(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Date", DbType:="DateTime")> ByVal [date] As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StudID", DbType:="Int")> ByVal studID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), [date], studID)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Publisher")>  _
Partial Public Class Publisher
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PublisherID As Integer
	
	Private _PublisherName As String
	
	Private _Books As EntitySet(Of Book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPublisherIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPublisherIDChanged()
    End Sub
    Partial Private Sub OnPublisherNameChanging(value As String)
    End Sub
    Partial Private Sub OnPublisherNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Books = New EntitySet(Of Book)(AddressOf Me.attach_Books, AddressOf Me.detach_Books)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublisherID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PublisherID() As Integer
		Get
			Return Me._PublisherID
		End Get
		Set
			If ((Me._PublisherID = value)  _
						= false) Then
				Me.OnPublisherIDChanging(value)
				Me.SendPropertyChanging
				Me._PublisherID = value
				Me.SendPropertyChanged("PublisherID")
				Me.OnPublisherIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublisherName", DbType:="VarChar(50)")>  _
	Public Property PublisherName() As String
		Get
			Return Me._PublisherName
		End Get
		Set
			If (String.Equals(Me._PublisherName, value) = false) Then
				Me.OnPublisherNameChanging(value)
				Me.SendPropertyChanging
				Me._PublisherName = value
				Me.SendPropertyChanged("PublisherName")
				Me.OnPublisherNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Publisher_Book", Storage:="_Books", ThisKey:="PublisherID", OtherKey:="PublisherID")>  _
	Public Property Books() As EntitySet(Of Book)
		Get
			Return Me._Books
		End Get
		Set
			Me._Books.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Books(ByVal entity As Book)
		Me.SendPropertyChanging
		entity.Publisher = Me
	End Sub
	
	Private Sub detach_Books(ByVal entity As Book)
		Me.SendPropertyChanging
		entity.Publisher = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Student")>  _
Partial Public Class Student
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Student_ID As Integer
	
	Private _First_Name As String
	
	Private _Last_Name As String
	
	Private _Year_Lvl As String
	
	Private _Address As String
	
	Private _TransHeaders As EntitySet(Of TransHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStudent_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStudent_IDChanged()
    End Sub
    Partial Private Sub OnFirst_NameChanging(value As String)
    End Sub
    Partial Private Sub OnFirst_NameChanged()
    End Sub
    Partial Private Sub OnLast_NameChanging(value As String)
    End Sub
    Partial Private Sub OnLast_NameChanged()
    End Sub
    Partial Private Sub OnYear_LvlChanging(value As String)
    End Sub
    Partial Private Sub OnYear_LvlChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TransHeaders = New EntitySet(Of TransHeader)(AddressOf Me.attach_TransHeaders, AddressOf Me.detach_TransHeaders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Student_ID() As Integer
		Get
			Return Me._Student_ID
		End Get
		Set
			If ((Me._Student_ID = value)  _
						= false) Then
				Me.OnStudent_IDChanging(value)
				Me.SendPropertyChanging
				Me._Student_ID = value
				Me.SendPropertyChanged("Student_ID")
				Me.OnStudent_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_First_Name", DbType:="VarChar(50)")>  _
	Public Property First_Name() As String
		Get
			Return Me._First_Name
		End Get
		Set
			If (String.Equals(Me._First_Name, value) = false) Then
				Me.OnFirst_NameChanging(value)
				Me.SendPropertyChanging
				Me._First_Name = value
				Me.SendPropertyChanged("First_Name")
				Me.OnFirst_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Last_Name", DbType:="VarChar(50)")>  _
	Public Property Last_Name() As String
		Get
			Return Me._Last_Name
		End Get
		Set
			If (String.Equals(Me._Last_Name, value) = false) Then
				Me.OnLast_NameChanging(value)
				Me.SendPropertyChanging
				Me._Last_Name = value
				Me.SendPropertyChanged("Last_Name")
				Me.OnLast_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year_Lvl", DbType:="VarChar(50)")>  _
	Public Property Year_Lvl() As String
		Get
			Return Me._Year_Lvl
		End Get
		Set
			If (String.Equals(Me._Year_Lvl, value) = false) Then
				Me.OnYear_LvlChanging(value)
				Me.SendPropertyChanging
				Me._Year_Lvl = value
				Me.SendPropertyChanged("Year_Lvl")
				Me.OnYear_LvlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_TransHeader", Storage:="_TransHeaders", ThisKey:="Student_ID", OtherKey:="Student_ID")>  _
	Public Property TransHeaders() As EntitySet(Of TransHeader)
		Get
			Return Me._TransHeaders
		End Get
		Set
			Me._TransHeaders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TransHeaders(ByVal entity As TransHeader)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_TransHeaders(ByVal entity As TransHeader)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Book")>  _
Partial Public Class Book
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookID As Integer
	
	Private _BookName As String
	
	Private _ISBN As String
	
	Private _PublisherID As System.Nullable(Of Integer)
	
	Private _Qty As System.Nullable(Of Integer)
	
	Private _BookAccessions As EntitySet(Of BookAccession)
	
	Private _Publisher As EntityRef(Of Publisher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    Partial Private Sub OnBookNameChanging(value As String)
    End Sub
    Partial Private Sub OnBookNameChanged()
    End Sub
    Partial Private Sub OnISBNChanging(value As String)
    End Sub
    Partial Private Sub OnISBNChanged()
    End Sub
    Partial Private Sub OnPublisherIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPublisherIDChanged()
    End Sub
    Partial Private Sub OnQtyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQtyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BookAccessions = New EntitySet(Of BookAccession)(AddressOf Me.attach_BookAccessions, AddressOf Me.detach_BookAccessions)
		Me._Publisher = CType(Nothing, EntityRef(Of Publisher))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BookID() As Integer
		Get
			Return Me._BookID
		End Get
		Set
			If ((Me._BookID = value)  _
						= false) Then
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookName", DbType:="VarChar(50)")>  _
	Public Property BookName() As String
		Get
			Return Me._BookName
		End Get
		Set
			If (String.Equals(Me._BookName, value) = false) Then
				Me.OnBookNameChanging(value)
				Me.SendPropertyChanging
				Me._BookName = value
				Me.SendPropertyChanged("BookName")
				Me.OnBookNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISBN", DbType:="VarChar(50)")>  _
	Public Property ISBN() As String
		Get
			Return Me._ISBN
		End Get
		Set
			If (String.Equals(Me._ISBN, value) = false) Then
				Me.OnISBNChanging(value)
				Me.SendPropertyChanging
				Me._ISBN = value
				Me.SendPropertyChanged("ISBN")
				Me.OnISBNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublisherID", DbType:="Int")>  _
	Public Property PublisherID() As System.Nullable(Of Integer)
		Get
			Return Me._PublisherID
		End Get
		Set
			If (Me._PublisherID.Equals(value) = false) Then
				If Me._Publisher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPublisherIDChanging(value)
				Me.SendPropertyChanging
				Me._PublisherID = value
				Me.SendPropertyChanged("PublisherID")
				Me.OnPublisherIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qty", DbType:="Int")>  _
	Public Property Qty() As System.Nullable(Of Integer)
		Get
			Return Me._Qty
		End Get
		Set
			If (Me._Qty.Equals(value) = false) Then
				Me.OnQtyChanging(value)
				Me.SendPropertyChanging
				Me._Qty = value
				Me.SendPropertyChanged("Qty")
				Me.OnQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_BookAccession", Storage:="_BookAccessions", ThisKey:="BookID", OtherKey:="BookID")>  _
	Public Property BookAccessions() As EntitySet(Of BookAccession)
		Get
			Return Me._BookAccessions
		End Get
		Set
			Me._BookAccessions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Publisher_Book", Storage:="_Publisher", ThisKey:="PublisherID", OtherKey:="PublisherID", IsForeignKey:=true)>  _
	Public Property Publisher() As Publisher
		Get
			Return Me._Publisher.Entity
		End Get
		Set
			Dim previousValue As Publisher = Me._Publisher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Publisher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Publisher.Entity = Nothing
					previousValue.Books.Remove(Me)
				End If
				Me._Publisher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Books.Add(Me)
					Me._PublisherID = value.PublisherID
				Else
					Me._PublisherID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Publisher")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BookAccessions(ByVal entity As BookAccession)
		Me.SendPropertyChanging
		entity.Book = Me
	End Sub
	
	Private Sub detach_BookAccessions(ByVal entity As BookAccession)
		Me.SendPropertyChanging
		entity.Book = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BookAccession")>  _
Partial Public Class BookAccession
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookAccessionID As Integer
	
	Private _AccessionCode As String
	
	Private _BookID As System.Nullable(Of Integer)
	
	Private _Book As EntityRef(Of Book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookAccessionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBookAccessionIDChanged()
    End Sub
    Partial Private Sub OnAccessionCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAccessionCodeChanged()
    End Sub
    Partial Private Sub OnBookIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Book = CType(Nothing, EntityRef(Of Book))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookAccessionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BookAccessionID() As Integer
		Get
			Return Me._BookAccessionID
		End Get
		Set
			If ((Me._BookAccessionID = value)  _
						= false) Then
				Me.OnBookAccessionIDChanging(value)
				Me.SendPropertyChanging
				Me._BookAccessionID = value
				Me.SendPropertyChanged("BookAccessionID")
				Me.OnBookAccessionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccessionCode", DbType:="VarChar(50)")>  _
	Public Property AccessionCode() As String
		Get
			Return Me._AccessionCode
		End Get
		Set
			If (String.Equals(Me._AccessionCode, value) = false) Then
				Me.OnAccessionCodeChanging(value)
				Me.SendPropertyChanging
				Me._AccessionCode = value
				Me.SendPropertyChanged("AccessionCode")
				Me.OnAccessionCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="Int")>  _
	Public Property BookID() As System.Nullable(Of Integer)
		Get
			Return Me._BookID
		End Get
		Set
			If (Me._BookID.Equals(value) = false) Then
				If Me._Book.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_BookAccession", Storage:="_Book", ThisKey:="BookID", OtherKey:="BookID", IsForeignKey:=true)>  _
	Public Property Book() As Book
		Get
			Return Me._Book.Entity
		End Get
		Set
			Dim previousValue As Book = Me._Book.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Book.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Book.Entity = Nothing
					previousValue.BookAccessions.Remove(Me)
				End If
				Me._Book.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BookAccessions.Add(Me)
					Me._BookID = value.BookID
				Else
					Me._BookID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Book")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.View_Details")>  _
Partial Public Class View_Detail
	
	Private _TransID As Integer
	
	Private _DateBorrowed As System.Nullable(Of Date)
	
	Private _StudentName As String
	
	Private _Address As String
	
	Private _Year_Lvl As String
	
	Private _BookName As String
	
	Private _ISBN As String
	
	Private _BookAccessionID As System.Nullable(Of Integer)
	
	Private _PublisherName As String
	
	Private _DateToReturn As System.Nullable(Of Date)
	
	Private _ActualDateReturned As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransID", DbType:="Int NOT NULL")>  _
	Public Property TransID() As Integer
		Get
			Return Me._TransID
		End Get
		Set
			If ((Me._TransID = value)  _
						= false) Then
				Me._TransID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateBorrowed", DbType:="Date")>  _
	Public Property DateBorrowed() As System.Nullable(Of Date)
		Get
			Return Me._DateBorrowed
		End Get
		Set
			If (Me._DateBorrowed.Equals(value) = false) Then
				Me._DateBorrowed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentName() As String
		Get
			Return Me._StudentName
		End Get
		Set
			If (String.Equals(Me._StudentName, value) = false) Then
				Me._StudentName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year_Lvl", DbType:="VarChar(50)")>  _
	Public Property Year_Lvl() As String
		Get
			Return Me._Year_Lvl
		End Get
		Set
			If (String.Equals(Me._Year_Lvl, value) = false) Then
				Me._Year_Lvl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookName", DbType:="VarChar(50)")>  _
	Public Property BookName() As String
		Get
			Return Me._BookName
		End Get
		Set
			If (String.Equals(Me._BookName, value) = false) Then
				Me._BookName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISBN", DbType:="VarChar(50)")>  _
	Public Property ISBN() As String
		Get
			Return Me._ISBN
		End Get
		Set
			If (String.Equals(Me._ISBN, value) = false) Then
				Me._ISBN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookAccessionID", DbType:="Int")>  _
	Public Property BookAccessionID() As System.Nullable(Of Integer)
		Get
			Return Me._BookAccessionID
		End Get
		Set
			If (Me._BookAccessionID.Equals(value) = false) Then
				Me._BookAccessionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublisherName", DbType:="VarChar(50)")>  _
	Public Property PublisherName() As String
		Get
			Return Me._PublisherName
		End Get
		Set
			If (String.Equals(Me._PublisherName, value) = false) Then
				Me._PublisherName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateToReturn", DbType:="Date")>  _
	Public Property DateToReturn() As System.Nullable(Of Date)
		Get
			Return Me._DateToReturn
		End Get
		Set
			If (Me._DateToReturn.Equals(value) = false) Then
				Me._DateToReturn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActualDateReturned", DbType:="Date")>  _
	Public Property ActualDateReturned() As System.Nullable(Of Date)
		Get
			Return Me._ActualDateReturned
		End Get
		Set
			If (Me._ActualDateReturned.Equals(value) = false) Then
				Me._ActualDateReturned = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TransHeader")>  _
Partial Public Class TransHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TransID As Integer
	
	Private _DateBorrowed As System.Nullable(Of Date)
	
	Private _Student_ID As System.Nullable(Of Integer)
	
	Private _Student As EntityRef(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransIDChanged()
    End Sub
    Partial Private Sub OnDateBorrowedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateBorrowedChanged()
    End Sub
    Partial Private Sub OnStudent_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStudent_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Student = CType(Nothing, EntityRef(Of Student))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TransID() As Integer
		Get
			Return Me._TransID
		End Get
		Set
			If ((Me._TransID = value)  _
						= false) Then
				Me.OnTransIDChanging(value)
				Me.SendPropertyChanging
				Me._TransID = value
				Me.SendPropertyChanged("TransID")
				Me.OnTransIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateBorrowed", DbType:="Date")>  _
	Public Property DateBorrowed() As System.Nullable(Of Date)
		Get
			Return Me._DateBorrowed
		End Get
		Set
			If (Me._DateBorrowed.Equals(value) = false) Then
				Me.OnDateBorrowedChanging(value)
				Me.SendPropertyChanging
				Me._DateBorrowed = value
				Me.SendPropertyChanged("DateBorrowed")
				Me.OnDateBorrowedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_ID", DbType:="Int")>  _
	Public Property Student_ID() As System.Nullable(Of Integer)
		Get
			Return Me._Student_ID
		End Get
		Set
			If (Me._Student_ID.Equals(value) = false) Then
				If Me._Student.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudent_IDChanging(value)
				Me.SendPropertyChanging
				Me._Student_ID = value
				Me.SendPropertyChanged("Student_ID")
				Me.OnStudent_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_TransHeader", Storage:="_Student", ThisKey:="Student_ID", OtherKey:="Student_ID", IsForeignKey:=true)>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.TransHeaders.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TransHeaders.Add(Me)
					Me._Student_ID = value.Student_ID
				Else
					Me._Student_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
